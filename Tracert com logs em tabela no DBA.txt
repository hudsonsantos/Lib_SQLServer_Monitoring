Read more: http://www.linhadecodigo.com.br/artigo/2955/passo-a-passo-para-encontrar-as-querys-mais-demoradas-do-banco-de-dados.aspx#ixzz575Vik8MC


-- Cria tabela de log

CREATE TABLE dbo.Traces(   
    TextData VARCHAR(MAX) NULL,
    NTUserName VARCHAR(128) NULL,
    HostName VARCHAR(128) NULL,
    ApplicationName VARCHAR(128) NULL,
    LoginName VARCHAR(128) NULL,
    SPID INT NULL,
    Duration NUMERIC(15, 2) NULL,
    StartTime DATETIME NULL,
    EndTime DATETIME NULL,
    Reads INT,
    Writes INT,
    CPU INT,
    ServerName VARCHAR(128) NULL,
    DataBaseName VARCHAR(128),
    RowCounts INT,
    SessionLoginName VARCHAR(128))




-- Querys maiores que 3 segundos

CREATE PROCEDURE [dbo].[stpCreate_Trace]
AS
BEGIN
    declare @rc int, @TraceID int, @maxfilesize bigint, @on bit, @intfilter int, @bigintfilter bigint
    select @on = 1, @maxfilesize = 50
    -- Criação do trace
    exec @rc = sp_trace_create @TraceID output, 0, N'C:\Temp\dba\Trace\Querys_Demoradas', @maxfilesize, NULL

    if (@rc != 0) goto error
    exec sp_trace_setevent @TraceID, 10, 1, @on 
    exec sp_trace_setevent @TraceID, 10, 6, @on 
    exec sp_trace_setevent @TraceID, 10, 8, @on 
    exec sp_trace_setevent @TraceID, 10, 10, @on
    exec sp_trace_setevent @TraceID, 10, 11, @on
    exec sp_trace_setevent @TraceID, 10, 12, @on
    exec sp_trace_setevent @TraceID, 10, 13, @on
    exec sp_trace_setevent @TraceID, 10, 14, @on
    exec sp_trace_setevent @TraceID, 10, 15, @on
    exec sp_trace_setevent @TraceID, 10, 16, @on
    exec sp_trace_setevent @TraceID, 10, 17, @on
    exec sp_trace_setevent @TraceID, 10, 18, @on
    exec sp_trace_setevent @TraceID, 10, 26, @on
    exec sp_trace_setevent @TraceID, 10, 35, @on
    exec sp_trace_setevent @TraceID, 10, 40, @on
    exec sp_trace_setevent @TraceID, 10, 48, @on
    exec sp_trace_setevent @TraceID, 10, 64, @on
    exec sp_trace_setevent @TraceID, 12, 1,  @on
    exec sp_trace_setevent @TraceID, 12, 6,  @on
    exec sp_trace_setevent @TraceID, 12, 8,  @on
    exec sp_trace_setevent @TraceID, 12, 10, @on
    exec sp_trace_setevent @TraceID, 12, 11, @on
    exec sp_trace_setevent @TraceID, 12, 12, @on
    exec sp_trace_setevent @TraceID, 12, 13, @on
    exec sp_trace_setevent @TraceID, 12, 14, @on
    exec sp_trace_setevent @TraceID, 12, 15, @on
    exec sp_trace_setevent @TraceID, 12, 16, @on
    exec sp_trace_setevent @TraceID, 12, 17, @on
    exec sp_trace_setevent @TraceID, 12, 18, @on
    exec sp_trace_setevent @TraceID, 12, 26, @on
    exec sp_trace_setevent @TraceID, 12, 35, @on
    exec sp_trace_setevent @TraceID, 12, 40, @on
    exec sp_trace_setevent @TraceID, 12, 48, @on
    exec sp_trace_setevent @TraceID, 12, 64, @on
    set @bigintfilter = 3000000 -- 3 segundos
    exec sp_trace_setfilter @TraceID, 13, 0, 4, @bigintfilter
    -- Set the trace status to start
    exec sp_trace_setstatus @TraceID, 1
    goto finish
    error:
    select ErrorCode=@rc

    finish:
END


-- Executa a procedure para que inicie o tracert

exec dbo.stpCreate_Trace


-- Para conferir o trace criado, basta executar a query abaixo.

SELECT *
FROM :: fn_trace_getinfo(default)
where cast(value as varchar(50)) = 'C:\Temp\dba\Trace\Querys_Demoradas.trc'


-- Conferindo todos os dados que foram armazenados no trace.

Select Textdata, NTUserName, HostName, ApplicationName, LoginName, SPID, cast(Duration /1000/1000.00 as numeric(15,2)) Duration, Starttime,
    EndTime, Reads,writes, CPU, Servername, DatabaseName, rowcounts, SessionLoginName
FROM :: fn_trace_gettable("C:\Trace\Querys_Demoradas.trc", default)
where Duration is not null
order by Starttime



---- PODE SE CRIAR UM JOB COM 3 STEPS

/*STEP 1- No primeiro Step devemos parar o trace momentaneamente para enviar todo o seu resultado para a tabela de log. Nesse step, você deve selecionar a database em que vc criou a tabela que armazenará o trace e incluir a query abaixo no step.
*/


Declare @Trace_Id int
SELECT @Trace_Id = [TraceId]
FROM fn_trace_getinfo(0)
WHERE CAST([value] AS VARCHAR(50)) = 'C:\Temp\dba\Trace\Querys_Demoradas.trc'
 
EXEC [dbo].[sp_trace_setstatus]  @traceid = @Trace_Id,  @status = 0 -- Interrompe o rastreamento especificado.
 
EXEC [dbo].[sp_trace_setstatus]  @traceid = @Trace_Id,  @status = 2 -- Fecha o rastreamento especificado e exclui sua definição do servidor.
 
INSERT INTO [dbo].[Traces] (    [Textdata], [NTUserName], [HostName], [ApplicationName], [LoginName], [SPID], [Duration], [Starttime],
                                [EndTime], [Reads], [writes], [CPU], [Servername], [DatabaseName], [rowcounts], [SessionLoginName] )
SELECT    [Textdata], [NTUserName], [HostName], [ApplicationName], [LoginName], [SPID], CAST([Duration] / 1000/ 1000.00 AS NUMERIC(15, 2)) [Duration], [Starttime],
        [EndTime], [Reads], [writes], [CPU], [Servername], [DatabaseName], [rowcounts], [SessionLoginName]
FROM :: fn_trace_gettable('C:\Temp\dba\Trace\Querys_Demoradas.trc', default)
WHERE [Duration] IS NOT NULL
ORDER BY [Starttime]

/*STEP 2 - Agora que os dados do trace já foram armazenados na tabela, deve-se excluir o arquivo de trace para que um novo seja criado. Isso pode ser realizado executando o comando “del C:\Trace\Querys_Demoradas.trc /Q” como pode ser visto na figura abaixo:
*/


del C:\Temp\dba\Trace\Querys_Demoradas.trc /Q


-- CASO QUEIRA RODANDO NO AMBIENTE FAÇA STEP 3

/*STEP 3 - Esse passo deve apenas recriar o trace. Similar ao step 1, você deve selecionar a database em que vc criou a procedure e rodar a query abaixo:
*/

EXEC  [dbo].[stpCreate_Trace]



